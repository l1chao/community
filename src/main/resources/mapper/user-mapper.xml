<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper
        PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
        "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="com.newcoder.community.dao.UserMapper">

    <!--    下面这个可以用来复用，见selectById-->
    <sql id="selectFields">
        id, username, password, salt, email, type, status, activation_code, header_url, create_time
    </sql>

    <sql id="insertFields">
        username, password, salt, email, type, status, activation_code, header_url, create_time
    </sql>


    <select id="selectById" resultType="User">
        select <include refid="selectFields"></include>
        from user
        where id= #{id}
    </select>

    <select id="selectByName" resultType="User">
        select id, username, password, salt, email, type, status, activation_code, header_url, create_time
        from user
        where id= #{username}
    </select>

    <select id="selectByEmail" resultType="User">
        select id, username, password, salt, email, type, status, activation_code, header_url, create_time
        from user
        where id= #{email}
    </select>

<!--    keyProperty="id": 当插入操作完成时，将生成的主键存储在传入的 User 对象的 id 属性中。这对于需要获取插入操作生成的自增主键的情况非常有用，例如，如果 user 表的 id 列是自增的，MyBatis 会将生成的主键值存储在 User 对象的 id 属性中。-->
    <insert id="insertUser" parameterType="User" keyProperty="id">
        insert into user (<include refid="insertFields"></include>)
        values(#{username}, #{password}, #{salt}, #{email}, #{type}, #{status}, #{activationCode}, #{headerUrl}, #{createTime})
    </insert>


    <update id="updateStatus">
        update user set status = #{status} where id = #{id}
    </update>

    <update id="updateHeader">
        update user set header_url = #{headerUrl} where id = #{id}
    </update>

    <update id="updatePassword">
        update user set password = #{password} where id = #{id}
    </update>


</mapper>